<?xml version="1.0"?>
<doc>
<assembly>
<name>
WinMonitorAA
</name>
</assembly>
<members>
<member name="T:WinMonitorAA.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:WinMonitorAA.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:WinMonitorAA.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:WinMonitorAA.GlobalHotkey">
 <summary>
 Class to perform system-wide hotkey operations.
 </summary>
</member>
<member name="T:WinMonitorAA.GlobalHotkey.NativeMethods">
 <summary>
 Native API Methods.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.NativeMethods.RegisterHotKey(System.IntPtr,System.Int32,System.UInt32,System.UInt32)">
 <summary>
 Defines a system-wide hotkey.
 </summary>
 <param name="hWnd">The hWND.</param>
 <param name="id">The identifier of the hotkey.
 If the hWnd parameter is NULL, then the hotkey is associated with the current thread rather than with a particular window.
 If a hotkey already exists with the same hWnd and id parameters.</param>
 <param name="fsModifiers">The keys that must be pressed in combination with the key specified by the uVirtKey parameter
 in order to generate the WM_HOTKEY message.
 The fsModifiers parameter can be a combination of the following values.</param>
 <param name="vk">The virtual-key code of the hotkey.</param>
 <returns>
 <c>true</c> if the function succeeds, otherwise <c>false</c>
 </returns>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.NativeMethods.UnregisterHotKey(System.IntPtr,System.Int32)">
 <summary>
 Unregisters a hotkey previously registered.
 </summary>
 <param name="hWnd">The hWND.</param>
 <param name="id">The identifier of the hotkey to be unregistered.</param>
 <returns>
 <c>true</c> if the function succeeds, otherwise <c>false</c>
 </returns>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.Key">
 <summary>
 Indicates the key assigned to the hotkey.
 </summary>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.Modifier">
 <summary>
 Indicates the Key-Modifier assigned to the hotkey.
 </summary>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.ID">
 <summary>
 Indicates the unique identifier assigned to the hotkey.
 </summary>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.Tag">
 <summary>
 Indicates user-defined data associated with this object.
 </summary>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.Count">
 <summary>
 Indicates how many times was pressed the hotkey.
 </summary>
</member>
<member name="T:WinMonitorAA.GlobalHotkey.KeyModifier">
 <summary>
 Key-modifiers to assign to a hotkey.
 </summary>
</member>
<member name="F:WinMonitorAA.GlobalHotkey.KeyModifier.None">
 <summary>
 Any modifier.
 </summary>
</member>
<member name="F:WinMonitorAA.GlobalHotkey.KeyModifier.Alt">
 <summary>
 The Alt key.
 </summary>
</member>
<member name="F:WinMonitorAA.GlobalHotkey.KeyModifier.Ctrl">
 <summary>
 The Control key.
 </summary>
</member>
<member name="F:WinMonitorAA.GlobalHotkey.KeyModifier.Shift">
 <summary>
 The Shift key.
 </summary>
</member>
<member name="F:WinMonitorAA.GlobalHotkey.KeyModifier.Win">
 <summary>
 The Windows key.
 </summary>
</member>
<member name="T:WinMonitorAA.GlobalHotkey.KnownMessages">
 <summary>
 Known Windows Message Identifiers.
 </summary>
</member>
<member name="F:WinMonitorAA.GlobalHotkey.KnownMessages.WM_HOTKEY">
 <summary>
 Posted when the user presses a hot key registered by the RegisterHotKey function. 
 The message is placed at the top of the message queue associated with the thread that registered the hot key.
 <paramref name="WParam"/>
 The identifier of the hot key that generated the message.
 If the message was generated by a system-defined hot key.
 <paramref name="LParam"/>
 The low-order word specifies the keys that were to be pressed in 
 combination with the key specified by the high-order word to generate the WM_HOTKEY message.
 </summary>
</member>
<member name="E:WinMonitorAA.GlobalHotkey.Press">
 <summary>
 Event that is raised when a hotkey is pressed.
 </summary>
</member>
<member name="T:WinMonitorAA.GlobalHotkey.HotKeyEventArgs">
 <summary>
 Event arguments for the Press event.
 </summary>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.HotKeyEventArgs.Key">
 <summary>
 Indicates the Key assigned to the hotkey.
 </summary>
 <value>The key.</value>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.HotKeyEventArgs.Modifier">
 <summary>
 Indicates the Key-Modifier assigned to the hotkey.
 </summary>
 <value>The modifier.</value>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.HotKeyEventArgs.ID">
 <summary>
 Indicates the unique identifier assigned to the hotkey.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.HotKeyEventArgs.Count">
 <summary>
 Indicates how many times was pressed the hotkey.
 </summary>
</member>
<member name="T:WinMonitorAA.GlobalHotkey.IsRegisteredException">
 <summary>
 Exception that is thrown when a hotkey tries to register but is already registered.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.IsRegisteredException.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:WinMonitorAA.GlobalHotkey.IsRegisteredException"/> class.
 </summary>
</member>
<member name="T:WinMonitorAA.GlobalHotkey.IsNotRegisteredException">
 <summary>
 Exception that is thrown when a hotkey tries to unregister but is not registered.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.IsNotRegisteredException.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:WinMonitorAA.GlobalHotkey.IsNotRegisteredException"/> class.
 </summary>
</member>
<member name="F:WinMonitorAA.GlobalHotkey._Count">
 <summary>
 Stores an counter indicating how many times was pressed the hotkey.
 </summary>
</member>
<member name="F:WinMonitorAA.GlobalHotkey.PressEventArgs">
 <summary>
 Stores the Press Event Arguments.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.#ctor(WinMonitorAA.GlobalHotkey.KeyModifier,System.Windows.Forms.Keys)">
 <summary>
 Creates a new system-wide hotkey.
 </summary>
 <param name="Modifier">
 Indicates the key-modifier to assign to the hotkey.
 ( Can use one or more modifiers )
 </param>
 <param name="Key">
 Indicates the key to assign to the hotkey.
 </param>
 <exception cref="T:WinMonitorAA.GlobalHotkey.IsRegisteredException"></exception>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.OnHotkeyPress">
 <summary>
 Occurs when a hotkey is pressed.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.IsRegistered">
 <summary>
 Determines whether this hotkey is registered on the system.
 </summary>
 <returns>
 <c>true</c> if this hotkey is registered; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.Register">
 <summary>
 Registers this hotkey on the system.
 </summary>
 <exception cref="T:WinMonitorAA.GlobalHotkey.IsRegisteredException"></exception>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.Unregister">
 <summary>
 Unregisters this hotkey from the system.
 After calling this method the hotkey turns unavaliable.
 </summary>
 <returns>
 <c>true</c> if unregistration succeeds, <c>false</c> otherwise.
 </returns>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.AssignHandle">
 <summary>
 Assigns the handle.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.CreateHandle">
 <summary>
 Creates the handle.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.CreateObjRef">
 <summary>
 Creates the object reference.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.DefWndProc">
 <summary>
 Definitions the WND proc.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.DestroyHandle">
 <summary>
 Destroys the window and its handle.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.Equals">
 <summary>
 Equalses this instance.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.GetHashCode">
 <summary>
 Gets the hash code.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.GetLifetimeService">
 <summary>
 Gets the lifetime service.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.InitializeLifetimeService">
 <summary>
 Initializes the lifetime service.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.ReleaseHandle">
 <summary>
 Releases the handle associated with this window.
 </summary>
</member>
<member name="P:WinMonitorAA.GlobalHotkey.Handle">
 <summary>
 Gets the handle for this window.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.WndProc(System.Windows.Forms.Message@)">
 <summary>
 Invokes the default window procedure associated with this window to process messages for this Window.
 </summary>
 <param name="m">
 A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.
 </param>
</member>
<member name="F:WinMonitorAA.GlobalHotkey.IsDisposed">
 <summary>
 To detect redundant calls when disposing.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.DisposedCheck">
 <summary>
 Prevent calls to methods after disposing.
 </summary>
 <exception cref="T:System.ObjectDisposedException"></exception>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.Dispose">
 <summary>
 Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
 </summary>
</member>
<member name="M:WinMonitorAA.GlobalHotkey.Dispose(System.Boolean)">
 <summary>
 Releases unmanaged and - optionally - managed resources.
 </summary>
 <param name="IsDisposing">
 <c>true</c> to release both managed and unmanaged resources; 
 <c>false</c> to release only unmanaged resources.
 </param>
</member>
</members>
</doc>
